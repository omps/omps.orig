<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs | my tech notes and what's going on]]></title>
  <link href="http://www.omps.in/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://www.omps.in/"/>
  <updated>2016-04-23T21:21:32+05:30</updated>
  <id>http://www.omps.in/</id>
  <author>
    <name><![CDATA[Om Prakash Singh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Day 7 - Commands for Human Languages and Editing Them]]></title>
    <link href="http://www.omps.in/blog/2015/12/20/day-7-commands-for-human-languages-and-editing-them/"/>
    <updated>2015-12-20T21:20:12+05:30</updated>
    <id>http://www.omps.in/blog/2015/12/20/day-7-commands-for-human-languages-and-editing-them</id>
    <content type="html"><![CDATA[<p>Emacs is wonderful for text editing and related stuff with text. It has many modes which helps in editing and managing text, which help increase the productive overall, here I explored some of the major modes and commands which can quickly help for editing text.</p>

<h2>Text Editing in Emacs<a id="sec-1-1" name="sec-1-1"></a></h2>

<p>Emacs has several major modes for handelling text, there is text mode for ordinary text which customizes emacs in small ways for syntactic convention of text. Outline mode provides special commands to handle text, Org Mode extends Outline mode and turns emacs into a full fledged organizer: we can manage TODO Lists, store notes and publish them in many formats and I would speak more about this in my coming days learnings. TeX and LaTeX mode contains embedded commands; HTML mode for HTML and SGML Modes; nxml-mode for XML Mode; Nroff Mode for Groff and Nroff Mode.</p>

<p>It is also possible to edit pictures made out of text characters, also referred as *&ldquo;ASCII art&rdquo;* using Picture mode.</p>

<h2>Words<a id="sec-1-2" name="sec-1-2"></a></h2>

<p>There are several commnads in emacs for operating on words and many of these I have already covered in my Day-1 and Day-4, but let me redo, so I will remeber it for a long time.
Again, the <strong>M</strong> refers the Meta i.e the Alt or Esc key on the keyboard and is followed by the character keys.</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Key bindings</th>
<th scope="col" class="left">commands</th>
<th scope="col" class="left">description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">M-f</td>
<td class="left">forward-word</td>
<td class="left">Self descriptive as it moves forward on word</td>
</tr>


<tr>
<td class="left">M-b</td>
<td class="left">backward-word</td>
<td class="left">it moves one word back.</td>
</tr>


<tr>
<td class="left">M-d</td>
<td class="left">kill-word</td>
<td class="left">kills up to the end of the word</td>
</tr>


<tr>
<td class="left">M-<DEL></td>
<td class="left">backward-kill-word</td>
<td class="left">kill backward to the beginning of the word.</td>
</tr>


<tr>
<td class="left">M-@</td>
<td class="left">mark-word</td>
<td class="left">Mark to the end of the word</td>
</tr>


<tr>
<td class="left">M-t</td>
<td class="left">transpose-words</td>
<td class="left">Transpose the word and drag across others</td>
</tr>


<tr>
<td class="left">M-=</td>
<td class="left">count-words-region</td>
<td class="left">gives the count of the words in the region.</td>
</tr>
</tbody>
</table>


<p><em>NOTES:</em>
<em>1. These keys parrellel with the character-based movements</em>
<em>2. The numeric arguments serves as the repeat count and the negative arguments would make the commands move in the opposite direction.</em>
<em>3. M-<DEL> deletes the word to the point where M-b would end, it will kill the comma and space as well, M-b M-d to just kill the word but not the comma.</em>
<em>4. If we choose there keybindings in our shell <strong>(set -o emacs)</strong>, these word keybindings can help us in moving around the long commands.</em></p>

<h2>Sentences<a id="sec-1-3" name="sec-1-3"></a></h2>

<p>The meta keys are also helpful in moving around the sentences.</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">commands</th>
<th scope="col" class="left">description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">M-a</td>
<td class="left">backward-sentence</td>
<td class="left">This will move the point to the beginning of the sentence</td>
</tr>


<tr>
<td class="left">M-e</td>
<td class="left">forward-sentence</td>
<td class="left">Will move forward to the end of sentence.</td>
</tr>


<tr>
<td class="left">M-k</td>
<td class="left">kill-sentence</td>
<td class="left">Kill forward to the end of the sentence.</td>
</tr>


<tr>
<td class="left">C-x <DEL></td>
<td class="left">backward-kill-sentence</td>
<td class="left">kill back to the beginning of the sentence.</td>
</tr>
</tbody>
</table>


<h3>Quoting from EMACS Manual<a id="sec-1-3-1" name="sec-1-3-1"></a></h3>

<p>#+BEGIN<sub>SRC</sub> Quote
 The sentence commands assume that you follow the American typist&rsquo;s
convention of putting two spaces at the end of a sentence.  That is, a
sentence ends wherever there is a `.&lsquo;, `?&rsquo; or `!&lsquo; followed by the end
of a line or two spaces, with any number of `)&rsquo;, `]&lsquo;, `&rsquo;&lsquo;, or `&ldquo;&rsquo;
characters allowed in between.  A sentence also begins or ends wherever
a paragraph begins or ends.  It is useful to follow this convention,
because it allows the Emacs sentence commands to distinguish between
periods that end a sentence and periods that indicate abbreviations.
\#+END<sub>SRC</sub> Quote</p>

<p><em>NOTE:</em>
<em>1. To use just one space between sentences, set the variable sentence-end-double-space to nil and to make the sentence commands stop for single spaces.</em>
<em>2. The variable sentence-end controls how to recognize the end of the sentence; its value is a regular expression, which is used to match the last few characters of the sentence.</em>
<em>3. Some languages such as Thai, doesn&rsquo;t end with periods; such cases can be handeld by setting variable sentence-end-without-period to t.</em></p>

<h2>Paragraphs<a id="sec-1-4" name="sec-1-4"></a></h2>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Commands</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">M-{</td>
<td class="left">backward-paragraph</td>
<td class="left">move to the beginning of paragraph.</td>
</tr>


<tr>
<td class="left">M-}</td>
<td class="left">forward-paragraph</td>
<td class="left">Move to the end of the next paragraph.</td>
</tr>


<tr>
<td class="left">M-h</td>
<td class="left">mark-paragraph</td>
<td class="left">put point and mark around this or next paragraph.</td>
</tr>


<tr>
<td class="left">M-h C-w</td>
<td class="left">&#xa0;</td>
<td class="left">kills the paragraph around or after point.</td>
</tr>
</tbody>
</table>


<p><em>Notes:</em>
<em>1. The definition of a paragraph boundary is controlled by the variables <strong>paragraph-separate</strong> and  <strong>paragraph-start</strong>. The value of these are regular expression.</em>
<em>2. In fundamental mode, Paragraph-start is *&ldquo;\f\\|[ \t]*$&rdquo;* and matches lines that either start or separate paragraph.</em>
<em>3. Paragraph separate is *&ldquo;[ \t\f]*$&rdquo;* and matches lines  that separate paragraph without being part of any paragraph.</em></p>

<h2>Pages<a id="sec-1-5" name="sec-1-5"></a></h2>

<p>The files are divided into pages delimited by the &ldquo;formfeed character&rdquo; (ASCII code 2, denoted as <contorl-l>) and in emacs is escape sequence .</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Commands</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">M-x What-page</td>
<td class="left">&#xa0;</td>
<td class="left">Display the page number and line number within that page</td>
</tr>


<tr>
<td class="left">C-x [</td>
<td class="left">backward-page</td>
<td class="left">Move point to the previous page boundary.</td>
</tr>


<tr>
<td class="left">C-x ]</td>
<td class="left">forward-page</td>
<td class="left">Move point ot next page boundary</td>
</tr>


<tr>
<td class="left">C-x C-p</td>
<td class="left">mark-page</td>
<td class="left">put point and mark around this page.</td>
</tr>


<tr>
<td class="left">C-x C-p C-w</td>
<td class="left">&#xa0;</td>
<td class="left">select and kill the page</td>
</tr>


<tr>
<td class="left">C-x l</td>
<td class="left">count-lines-page</td>
<td class="left">Count the lines in this page.</td>
</tr>
</tbody>
</table>


<p><em>Note:</em>
<em>page-delimiter control where the page begins. Its a regular expression *&ldquo;f&rdquo;* which matches a beginning of a line that separate pages.</em></p>

<h2>Filling Text<a id="sec-1-6" name="sec-1-6"></a></h2>

<p>Filling text means breaking up the lines that fit a specified width. Emacs does the filling in 2 ways. <strong>Auto Fill Mode</strong> inserts text with self-inserting characters and automatically fills it. <strong>Explicit fill Commands</strong>  can be used for editing texts.</p>

<h3>Auto Fill<a id="sec-1-6-1" name="sec-1-6-1"></a></h3>

<p>This is a minor mode in which the lines are broken automatically when they become too wide, breaking up of lines only happens when you type <SPC> or <RET>.</p>

<p>&rsquo;M-x auto-fill-mode' : Toggles the Auto Fill mode.</p>

<p>&lsquo;<SPC>/<RET>&rsquo; : Break lines when appropriate.</p>

<p>From the command line the auto-fill mode enables or disables the mode for current buffer. From LISP <em>auto-fill</em> is enabled when called with omitted or nil argument. for enabling in the major modes, add auto-fill-mode in mode hooks. When the mode it enabled it will show <strong>Fill</strong> in the mode line.</p>

<p>This mode breaks any line which goes longer than the desired width by pressing <SPC> or <RET>, and to insert a SPACE or any newline without breaking the lines tye <strong>C-q <SPC></strong> or <strong>C-q C-j</strong> and <strong>C-o</strong> for inserting new line.</p>

<p>Auto fill mode does not refill the paragraphs; it break lines but does not merge lines, editing in the middle of the paragraph can result in paragraph which is not correctly filled. To fill them correctly we may need to use explicit Fill Commands.</p>

<h3>Fill Commands<a id="sec-1-6-2" name="sec-1-6-2"></a></h3>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Key bindings</th>
<th scope="col" class="left">Command</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">M-q</td>
<td class="left">fill-paragraph</td>
<td class="left">Fill current paragraph</td>
</tr>


<tr>
<td class="left">C-x f</td>
<td class="left">set-fill-column</td>
<td class="left">Set the fill column</td>
</tr>


<tr>
<td class="left">M-x fill-region</td>
<td class="left">fill-region</td>
<td class="left">Fill each paragraph in the region.</td>
</tr>


<tr>
<td class="left">M-x fill-region-as-paragraph</td>
<td class="left">&#xa0;</td>
<td class="left">Fill the region consider it as paragraph.</td>
</tr>


<tr>
<td class="left">M-o M-s</td>
<td class="left">&#xa0;</td>
<td class="left">Center a line.</td>
</tr>
</tbody>
</table>


<p><em>Notes:</em>
<em>1. M-q and fill-region uses the usual emacs criteria for finding paragraph boundaries, which refills everything between point and mark as single paragraph.</em>
<em>2. Numeric argument to <strong>M-q</strong> justifies the text as well as fill it.</em>
<em>3. To Remove extra spaces, use M-q with no argument.</em>
<em>4. The default vault for fill column is 70.</em>
<em>5. <strong>C-x f</strong> (sets-fill-column) sets the numeric value for fill column. With just C-u as argument it sets fill-column to the current horizantal position of point.</em>
<em>6. By default, emacs consider a period followed  by two spaces or by a newline as the end of sentence; a period with just one space will be called as abbrevation and not the end of the sentence.</em>
<em>7. Setting &lsquo;sentence-end-double-space&rsquo; to nil the fill commands will break a line after a period followed by a period and a space.</em></p>

<h3>The Fill Prefix<a id="sec-1-6-3" name="sec-1-6-3"></a></h3>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Command</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">C-x .</td>
<td class="left">set-fill-prefix</td>
<td class="left">Set the fill prefix</td>
</tr>


<tr>
<td class="left">M-q</td>
<td class="left">fill-paragraph</td>
<td class="left">Fill a paragraph using current fill prefix</td>
</tr>


<tr>
<td class="left">M-x fill-individual-paragraphs</td>
<td class="left">&#xa0;</td>
<td class="left">Fill the region, considering each change of indentation as starting a new paragraph.</td>
</tr>


<tr>
<td class="left">M-x fill-nonuniform-paragraphs</td>
<td class="left">&#xa0;</td>
<td class="left">Consider only paragraph separator lines as starting a new paragraph.</td>
</tr>
</tbody>
</table>


<p><em>Notes:</em>
<em>1. Move to a line which starts with desired prefix, put point at the end of the prefix and type C-x .</em>
<em>2. To turn off a prefix, specify an empty prefix: type C-x . with point at the beginning of line.</em>
<em>3. The fill prefix is stored in fill-prefix variable. if the value is nil, then there is no fill prefix.</em></p>

<p>This feature allows paragraphs to be filled so each line starts with a special string of characters (such a sequence of spaces, giving and indented paragraph). you can specify fill prefix explicitly; otherwise emacs tries to deduce automatically.</p>

<h3>Adaptive Fill.<a id="sec-1-6-4" name="sec-1-6-4"></a></h3>

<p>The fill command deduce the proper fill prefix for a paragraph automatically in some cases; either white spaces or certain precaution characters at the beginning of line are propagated to all lines of the paragraph.</p>

<p>If the paragraph has two or more lines, the fill prefix is taken from the paragraph&rsquo;s second line, but only if it appears on the first line as well.</p>

<p>If a paragraph has just one line, fill commands <span class="underline">may</span> take a prefix from that line.  The decision is complicated because there are three reasonable things to do in such a case:</p>

<ul>
<li><p>Use the first line&rsquo;s prefix on all the lines of the paragraph.</p></li>
<li><p>Indent subsequent lines with whitespace, so that they line up under the text that follows the prefix on the first line, but don&rsquo;t actually copy the    <br/>
prefix from the first line.</p></li>
<li><p>Don&rsquo;t do anything special with the second and following lines.</p></li>
</ul>


<p>All three of these styles of formatting are commonly used.  So the fill commands try to determine what you would like, based on the prefix that appears and on the major mode.  Here is how.</p>

<p>If the prefix found on the first line matches `adaptive-fill-first-line-regexp', or if it appears to be a comment-starting sequence (this depends on the major mode), then the prefix found is used for filling the paragraph, provided it would not act as a paragraph starter on subsequent lines.</p>

<p>Otherwise, the prefix found is converted to an equivalent number of spaces, and those spaces are used as the fill prefix for the rest of the lines, provided they would not act as a paragraph starter on subsequent lines.</p>

<p>In Text mode, and other modes where only blank lines and page delimiters separate paragraphs, the prefix chosen by adaptive filling never acts as a paragraph starter, so it can always be used for filling.</p>

<p>The variable `adaptive-fill-regexp' determines what kinds of line beginnings can serve as a fill prefix: any characters at the start of the line that match this regular expression are used.  If you set the variable `adaptive-fill-mode' to `nil', the fill prefix is never chosen automatically.</p>

<p>You can specify more complex ways of choosing a fill prefix automatically by setting the variable `adaptive-fill-function' to a function.  This function is called with point after the left margin of a line, and it should return the appropriate fill prefix based on that line.  If it returns `nil', `adaptive-fill-regexp' gets a chance to find a prefix.</p>

<h2>Case<a id="sec-1-7" name="sec-1-7"></a></h2>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Commands</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">M-l</td>
<td class="left">downcase-word</td>
<td class="left">Convert the following word to lower case.</td>
</tr>


<tr>
<td class="left">M-u</td>
<td class="left">upcase-word</td>
<td class="left">Convert the following word to upper case.</td>
</tr>


<tr>
<td class="left">M-c</td>
<td class="left">capitalize-word</td>
<td class="left">Capitalize the following word.</td>
</tr>


<tr>
<td class="left">C-x C-l</td>
<td class="left">downcase-region</td>
<td class="left">Convert region to lowercase.</td>
</tr>


<tr>
<td class="left">C-x C-u</td>
<td class="left">upcase-region</td>
<td class="left">Convert region to upper case.</td>
</tr>
</tbody>
</table>


<p><em>Note:</em>
<em>1. When a negative argument, the case conversion applies to appropriate no. of words before point, but do not move the point, its convinent if I typed something in wrong case and want to correct the case.</em>
<em>2. In case the command to change case is given in the middle of the word, the case change would happen from the point to the end of the word.</em></p>

<h2>Text Mode<a id="sec-1-8" name="sec-1-8"></a></h2>

<p>This is the major mode for editing the text language, any file ending with .txt will automatically enables this mode; and this mode can also be called by M-x text-mode. Blank lines and page delimiters separate paragraphs, and as a result paragraphs can be indented, and adaptive filling determines what indentation to use when filling a paragraph. The <TAB> usually inserts whitespace up to the next tab stop, instead of indenting the current line.</p>

<p>Text mode turns off comments features except when you explicitly invoke them. It changes so that the single quotes are considered part of the words. But if a word starts with a single quote it is treated as a prefix for the purpose of capitalization. Entering text-mode invokes text-mode-hook.</p>

<h2>Outline Mode<a id="sec-1-9" name="sec-1-9"></a></h2>

<p>This is major mode derived from Text mode, which is specialized for editing outlines; it provides commands to navigate between entries in the outline structure. Type M-x outline-mode to switch to outline mode, entering this mode runs the hook text-mode-hook followed by outline-mode-hook.</p>

<p>When in outline mode use command to make a line invisible it disappears the line and ellipsis(three periods in a row) is displayed at the end of the previous visible line.</p>

<p>Editing command on lines, such as C-n and C-p treat the text of the invisible line as part of the previous visible line.</p>

<p>outline-minor-mode toggle outline minor mode in the current buffer, it is a buffer-local minor mode which provides the same commands as the major mode for the current buffer, this provides special keybindings with C-c prefix, and C-c @ as the prefix in minor-mode.</p>

<h3>Outline Format<a id="sec-1-9-1" name="sec-1-9-1"></a></h3>

<p>Outline mode assumes the the lines in the buffer are of two types:
&ldquo;heading lines&rdquo; and &ldquo;body lines&rdquo;</p>

<p>Heading line: start with one or more asterisk (&lsquo;*&rsquo;); the number of asterisks determines the depth of the heading in the outline structure.
Body Line: Any line which is not a heading line is a body line. Body line belong with a preceding heading line.</p>

<p>A heading line and a body line collectively is called as an entry.</p>

<h3>Outline mode commands<a id="sec-1-9-2" name="sec-1-9-2"></a></h3>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Key bindings</th>
<th scope="col" class="left">Commands</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">C-c C-n</td>
<td class="left">outline-next-visible-heading</td>
<td class="left">Move point to the next visible heading</td>
</tr>


<tr>
<td class="left">C-c C-p</td>
<td class="left">outline-previous-visible-heading</td>
<td class="left">Move point to the previous visible heading.</td>
</tr>


<tr>
<td class="left">C-c C-f</td>
<td class="left">outline-forward-same-level</td>
<td class="left">Move point to the next visible heading line at the same level.</td>
</tr>


<tr>
<td class="left">C-c C-b</td>
<td class="left">outline-backward-same-level</td>
<td class="left">Move point to previous heading line at the same level.</td>
</tr>


<tr>
<td class="left">C-c C-u</td>
<td class="left">outline-up-heading</td>
<td class="left">Move point up to a lower-level.</td>
</tr>
</tbody>
</table>


<h3>Outline visibility commands<a id="sec-1-9-3" name="sec-1-9-3"></a></h3>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Commands</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">C-c C-c</td>
<td class="left">hide-entry</td>
<td class="left">Make the current heading line's body invisible</td>
</tr>


<tr>
<td class="left">C-c C-e</td>
<td class="left">show-entry</td>
<td class="left">Make the current heading line's body visible</td>
</tr>


<tr>
<td class="left">C-c C-d</td>
<td class="left">hide-subtree</td>
<td class="left">Make everything under the heading invisible excluding the heading</td>
</tr>


<tr>
<td class="left">C-c C-s</td>
<td class="left">show-subtree</td>
<td class="left">Make everything under the current heading visible</td>
</tr>


<tr>
<td class="left">C-c C-l</td>
<td class="left">hide-leaves</td>
<td class="left">Make the body of the current heading line, and all of its subheadings</td>
</tr>


<tr>
<td class="left">C-c C-k</td>
<td class="left">show-branches</td>
<td class="left">Make all subheading of the current heading line, at all levels, visible</td>
</tr>


<tr>
<td class="left">C-c C-i</td>
<td class="left">show-children</td>
<td class="left">Make immediate subheadings of the current heading line visible</td>
</tr>


<tr>
<td class="left">C-c C-t</td>
<td class="left">hide-body</td>
<td class="left">Make all body lines in the buffer invisible</td>
</tr>


<tr>
<td class="left">C-c C-a</td>
<td class="left">show-all</td>
<td class="left">Make all line in the buffer visible</td>
</tr>


<tr>
<td class="left">C-c C-q</td>
<td class="left">hide-sublevels</td>
<td class="left">Hide everything except the top N level of heading lines</td>
</tr>


<tr>
<td class="left">C-c C-o</td>
<td class="left">hide-other</td>
<td class="left">HIde everything except the heading or the body that point is in</td>
</tr>
</tbody>
</table>


<p>And most of these commands may work differently in org-mode, the org-mode is an advance implementation of outline-mode. I will be writing about this mode in my later days. It may confuse me at a later stage as mainly I use org-mode for my purposes of note taking and writing this blog. Let me provide some brief introduction to the org-mode.</p>

<h2>Org Mode<a id="sec-1-10" name="sec-1-10"></a></h2>

<p>Org mode, as in outline mode, each entry has a heading line that starts with one or more asterisk (*); Any line beginning with a &lsquo;#&rsquo; is considered as a comment. and it also provides commands to view and manipulate the outline structure.</p>

<p>The simplest of these commands is <TAB> (org-cycle). If invoked on heading line, it cycles through different visiblity states of that subtree:
1.  Showing only the heading line.
2.  Show only the heading lines and the heading lines of its direct children.
3.  Show the entire subtree.</p>

<p>The <S-TAB> (org-shifttab) in an org mode cycle visiblity of entire online subtree
1.  Show only top-level heading lines.
2.  Show all heading lines but no body lines.
3.  Show everything.</p>

<p>We can move the entire entry up and down in the buffer, including its body lines and subtree, by typing M-<up> (org-metaup) or M-<down> (org-metadown) on the heading line. Similarly, it can promote or demote the heading line with M-<left> (org-metaleft) and M-&lt;right (org-metaright). For details, The Org Mode Manual.</p>

<h3>Org as an Organizer<a id="sec-1-10-1" name="sec-1-10-1"></a></h3>

<p>You can tag an Org entry as a &ldquo;TODO&rdquo; by typing <strong>C-c C-t</strong> (org-todo) anywhere in the entry. This adds <em>TODO</em> keyword and typing the keyword <strong>C-c C-t</strong> again switches the keyword to <em>DONE</em>; press <strong>C-c C-t</strong> again and it will remove the keyword entirely. They keywords can be customized using the variable &lsquo;org-todo-keywords&rsquo;</p>

<p>With the possiblity of marking an entry as TODO, we can also attach a date to it by typing <strong>C-c C-s</strong> (org-schedule), This prompts for a date by popping a calendar, and then adds the tag &lsquo;SCHEDULED&rsquo;, together with the selected date, beneath the heading line. <strong>C-c C-d</strong> (org-deadline) have the same effect except it adds the tag &lsquo;DEADLINE&rsquo;.</p>

<p>Once you have some planned TODO items, you can add that file to the list of &ldquo;agenda fileS&rdquo; by typing <strong>C-c [</strong> (org-agenda-file-to-front). It allows us to maintain multiple agenda  files. The list of these agenda files are stored in the variable &lsquo;org-agenda-files&rsquo;.</p>

<p>Typing M-x org-agenda lets view items coming from agenda file, this command prompts for what we want to see: a list of things to do this week, a list of TODO items with specific keywords.</p>

<h3>Org as an authoring system<a id="sec-1-10-2" name="sec-1-10-2"></a></h3>

<p>To format org notes nicely and to prepare them for export and publication, <strong>C-c C-e</strong> (org-export) to export buffer and prompts for a export format; includes HTML, LaTeX, OpenDocument(.odt), and PDF.</p>

<p>To export several files at once to a specified directory, either locally or over the network, we can define a list of projects through the variable &lsquo;org-publish-project-alist&rsquo;</p>

<p>Org supports a simple markup scheme for applying text formatting to exported documents:</p>

<ul>
<li>This text is <em>emphasized</em></li>
<li>This text is <strong>in bold</strong></li>
<li>This text is <span class="underline">underlined</span></li>
<li>This text uses <code>a teletype font</code></li>
</ul>


<blockquote><p>``This is a quote.&lsquo;&rsquo;</p></blockquote>

<pre><code>This is an example.
</code></pre>

<h2>TeX Mode<a id="sec-1-11" name="sec-1-11"></a></h2>

<p>Emacs provides special major modes for editing files written in TeX and its related formats. TeX is a powerful text formatter written by Donald Knuth; like GNU Emacs. Latex is a simplified input format for TeX implemented using TeX macros. DocTeX is a special file format in which the LateX sources are written, combining sources with documentation.</p>

<p>TeX mode has four variants:
1.  Plain TeX mode
2.  LateX mode.
3.  DocTeX mode.
4.  SliTeX mode.</p>

<p>These distinc major modes differ only slightly, and are designed for editing the four different format. Emacs selects the appropriate mode by looking at the contents of the buffer. Emacs chooses the mode specified by the variable &lsquo;tex-default-mode&rsquo;; its default value is latex-mode. If Emacs doesn&rsquo;t get it right you can select the correct variant of TeX using the command &rsquo;M-x plain-tex-mode', &rsquo;M-x latex-mode', &rsquo;M-x slitex-mode', or &rsquo;M-x doctex-mode'.</p>

<h2>SGML and HTML Modes<a id="sec-1-12" name="sec-1-12"></a></h2>

<p>HTML mode is slightly customizable variant of SGML mode.</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Command</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">C-C C-n</td>
<td class="left">sgml-name-char</td>
<td class="left">Interactively specify a special character and insert the SGML '&' command for that character</td>
</tr>


<tr>
<td class="left">C-c C-t</td>
<td class="left">sgml-tag</td>
<td class="left">Specify a tag and its attribute.</td>
</tr>


<tr>
<td class="left">C-c C-a</td>
<td class="left">sgml-attributes</td>
<td class="left">insert attribute value for the current tag</td>
</tr>


<tr>
<td class="left">C-c C-f</td>
<td class="left">sgml-skip-tag-forward</td>
<td class="left">skip across a balanced tag group.</td>
</tr>


<tr>
<td class="left">C-c C-b</td>
<td class="left">sgml-skip-tag-backward</td>
<td class="left">skip backward across a balanced tag group.</td>
</tr>


<tr>
<td class="left">C-c C-d</td>
<td class="left">sgml-delete-tag</td>
<td class="left">Delete the tag</td>
</tr>


<tr>
<td class="left">C-c ? TAG <RET></td>
<td class="left">sgml-tag-help</td>
<td class="left">display the description and the meaning of the tag</td>
</tr>


<tr>
<td class="left">C-c /</td>
<td class="left">sgml-close-tag</td>
<td class="left">insert a close tag for the innermost undetermind tag</td>
</tr>


<tr>
<td class="left">C-c 8</td>
<td class="left">sgml-name-8bit-mode</td>
<td class="left">Toggle a minor mode in which Latin-1 characters insert the corresponding SGML commands.</td>
</tr>


<tr>
<td class="left">C-c C-v</td>
<td class="left">sgml-validate</td>
<td class="left">run a shell commands to validate the current buffer as SGML.</td>
</tr>


<tr>
<td class="left">C-c <TAB></td>
<td class="left">sgml-tags-invisible</td>
<td class="left">Toggle the visiblity of existing tags in the buffer.</td>
</tr>
</tbody>
</table>


<p>There is a major mode for editing XML documents called as nXML mode. This is a mode which can recognize any XML schema and use them to provide completion on XML elements via &rsquo;M-<TAB>, as well as on the fly XML validation with error highlighting. To enable nXML mode for existing buffer type <strong>M-x nxml-mode</strong> or <strong>M-x xml-mode</strong></p>

<p>For files with extension .xml nxml-mode is used by default; and for files with xhtml html-mode is used.</p>

<h2>Nroff mode<a id="sec-1-13" name="sec-1-13"></a></h2>

<p>This is a major mode derived from Text mode and is specialized for editing nroff files e.g. UNIX man pages. <strong>M-x nroff-mode</strong> enters into this mode, and runs the hook &lsquo;text-mode-hook&rsquo;, then &lsquo;nroff-mode-hook&rsquo;; nroff command lines are treated as paragraph separators, pages are separated by &lsquo;.bp&rsquo; commands, and comments start with backslash-doublequote (\&ldquo;)</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Commands</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">M-n</td>
<td class="left">forward-next-line</td>
<td class="left">move to the beginning of next line, which is not a nroff command</td>
</tr>


<tr>
<td class="left">M-p</td>
<td class="left">backward-next-line</td>
<td class="left">same but moves up</td>
</tr>


<tr>
<td class="left">M-?</td>
<td class="left">count-text-lines</td>
<td class="left">display in the echo area the number of text lines.</td>
</tr>
</tbody>
</table>


<p><strong>M-x electric-nroff-mode</strong> toggles the Electric Nroff mode and is a minor-mode and can be used with Nroff mode.</p>

<h2>Enriched Text<a id="sec-1-14" name="sec-1-14"></a></h2>

<p>This is a minor mode for editing formatted text files in a WYSIWYG (&ldquo;what you see is what you get&rdquo;) fashion. When Enriched mode is enabled we can apply various formatting properties to the text in the buffer. This mode is typically used by Text mode and is not compatible with Font Lock Mode which is used by many major modes, for syntax highlighting. When you save a buffer with enriched mode enabled, it is saved using the &lsquo;text/enriched&rsquo; format, including the formatting indentation.</p>

<p>To create a new file of formatted text, visit file and type <strong>M-x enriched-mode</strong></p>

<h2>Editing Text Based Tables<a id="sec-1-15" name="sec-1-15"></a></h2>

<p>The table package provides commands to easily edit the text-based tables. A &ldquo;table&rdquo; consist of t a rectangular text area which is divided into &ldquo;cells&rdquo;. Each cell must be one character wide and one character high, not counting its border lines. A cell can be subdivided into more cells, but they cannot overlap.</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Commands</th>
<th scope="col" class="left">Default</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">table-cell-vertical-char</td>
<td class="left">Pipe</td>
<td class="left">The character used for vertical lines.</td>
</tr>


<tr>
<td class="left">table-cell-horizontal-chars</td>
<td class="left">- =</td>
<td class="left">character used for horizontal lines.</td>
</tr>


<tr>
<td class="left">table-cell-intersection-char</td>
<td class="left">+</td>
<td class="left">character used for intersection of horizontal and vertical lines</td>
</tr>
</tbody>
</table>


<p>The following are examples of <span class="underline">invalid</span> tables:</p>

<!-- This HTML table template is generated by emacs 24.5.1 -->


<table border="1">
  <tr>
    <td align="left" valign="top">
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
      --+&nbsp;&nbsp;<br />
      &nbsp;&nbsp;|&nbsp;&nbsp;<br />
      &nbsp;&nbsp;|&nbsp;&nbsp;
    </td>
  </tr>
</table>


<p>a          b          c</p>

<p>From left to right:</p>

<ol>
<li><p>Overlapped cells or non-rectangular cells are not allowed.</p></li>
<li><p>The border must be rectangular.</p></li>
<li><p>Cells must have a minimum width/height of one character.</p></li>
</ol>


<h2>Two column editing<a id="sec-1-16" name="sec-1-16"></a></h2>

<p>Two columns lets you convinently edit two side-by-side columns of text. It uses two side-by-side windows, each showing its own buffer. There are three ways to enter two column mode:</p>

<ol>
<li><p><F2> 2 or C-x 6 2 - Enter two columns mode with the current buffer on the left and on the right, a buffer whose name is based on the current buffer&rsquo;s name.</p></li>
<li><p><F2> s  or C-x 6 s - Split the current buffer, which contains two column text, into two buffers and display them side by side.</p></li>
<li><p><F2> b BUFFER <RET> or C-x 6 b BUFFER <RET> - Enter two columns mode using the current buffer as the left-hand buffer, and using buffer BUFFER as the right-hand buffer.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 6 - Help and Run Command by Their Name]]></title>
    <link href="http://www.omps.in/blog/2015/12/13/day-6-help-and-run-command-by-their-name/"/>
    <updated>2015-12-13T21:09:38+05:30</updated>
    <id>http://www.omps.in/blog/2015/12/13/day-6-help-and-run-command-by-their-name</id>
    <content type="html"><![CDATA[<p>Sixth day of writing my content, I had never thought i would be even writing for this many posts continuously(I am kind of a lazy writer) and I realize this experience of writing blogs and sharing my learnings or acquired knowledge is actually encouraging. I started to think that if I am able to put some extra time and effort, I may also complete a lot of things by taking similar challenegs. My priority ones are loosing weight(I am still finding myself in tough situation on to get myself motivated) and learning the python programming language, which as I had been told is pretty easy to learning. I may get inconsistent at times due to other priorities coming up, but writing my learnings and posting everyday keeps me motivated and keep reminiding me I have pending stuff to do.</p>

<p>Every emacs command has a name which can be used against the convenient key bindings. Most emacs commands doesn&rsquo;t have key bindings so the only way to learn them is to use them as commands, by emacs convention all the command will consist one or more words separated  by &lsquo;-&rsquo;. For eg. auto-fill-mode or manual-entry. So to enter a command, type M-x enter the command name RET (to execute), C-g (to cancel). Its something similar to what we discussed in our Day 5, to enter the mini-buffer run the command and execute it and it does work similar for completion as it is to be done in mini-buffer.</p>

<p>well there are many things which we need immediately and overlook to take the effort to read the manual, or say for LISP errors which we might not be aware of, the freenode.org IRC network&rsquo;s #emacs channel is the best place after failed attempt of finding any help on google and emacswiki.org. but again at the same time emacs itself has a very awesome online documentation for reference. Online means it is accessible within emacs all the time. The help commands are easily accessible with &lsquo;C-h&rsquo; help character, after this we usually put the character for which we are seeking help and can be canceled the same way as all the mini-buffers. &lsquo;C-h&rsquo; itself a help option, so typing &lsquo;C-h C-h&rsquo; will print the available help characters. Apart from C-h, F1 can also  be used. I have put some simple stuff about how to ask help in Emacs at &lt;<a id="put-the-link-here" name="put-the-link-here"></a>. A more detailed list s below.</p>

<p>Similarly apropos are the commands which may answer certain questions as &ldquo;what are the commands for working with files?&rdquo;. specifying a apropos pattern such as a word, a list of words, or regular expressions, each apropos command display a list of item that matches the pattern in a separate window.</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Commands</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">C-h a *TOPICS*</td>
<td class="left">Searched for the command whose name matches the arguments</td>
</tr>


<tr>
<td class="left">C-h i d m *emacs* RET i *TOPIC* RET</td>
<td class="left">This searches for the topic in the indices of online emacs manual, and prints the first match</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">',' to jump to the subsequent matches, we can also use regexes here.</td>
</tr>


<tr>
<td class="left">C-h i d m *emacs* RET s *TOPIC* RET</td>
<td class="left">Same as above, but instead of just searching the indices, it searches the manual too.</td>
</tr>


<tr>
<td class="left">C-h C-f</td>
<td class="left">Displays the FAQ.</td>
</tr>


<tr>
<td class="left">C-h p</td>
<td class="left">Display all the emacs package based on the keywords.</td>
</tr>


<tr>
<td class="left">C-h b</td>
<td class="left">Display all active key bindings</td>
</tr>


<tr>
<td class="left">C-h c *key*</td>
<td class="left">show the name of the command it runs. (describe-key-briefly)</td>
</tr>


<tr>
<td class="left">C-h d *TOPICS* RET</td>
<td class="left">Display command and variables whose documentation matches topic. (aprops-documentation)</td>
</tr>


<tr>
<td class="left">C-h e</td>
<td class="left">Display **Message** Buffer</td>
</tr>


<tr>
<td class="left">C-h f *function* RET</td>
<td class="left">Display documentation on the LISP function (describe-function)</td>
</tr>


<tr>
<td class="left">C-h h</td>
<td class="left">Display the 'HELLO' file</td>
</tr>


<tr>
<td class="left">C-h i</td>
<td class="left">Run info, the GNU documentation browser, the complete emacs document is available online in info</td>
</tr>


<tr>
<td class="left">C-h key</td>
<td class="left">Display the name and the documentation of the command that the key runs. (describe-key)</td>
</tr>


<tr>
<td class="left">C-h l</td>
<td class="left">Description of last 300 keystrokes. (view-lossage)</td>
</tr>


<tr>
<td class="left">C-h f</td>
<td class="left">Display docuemntation of the current major mode. (describe-mode)</td>
</tr>


<tr>
<td class="left">C-h n</td>
<td class="left">Display news of recent changes. (view-emacs-news)</td>
</tr>


<tr>
<td class="left">C-h p</td>
<td class="left">find packages by topic keyword. ((finder-by-keyword)</td>
</tr>


<tr>
<td class="left">C-h r</td>
<td class="left">Display the emacs manual. (info-emacs-manual)</td>
</tr>


<tr>
<td class="left">C-h s</td>
<td class="left">Display the current contents of the syntax table, with explanation of what they mean</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">(describe-syntax)</td>
</tr>


<tr>
<td class="left">C-h t</td>
<td class="left">enter the emacs interactive tutorial. (help-with-tutorial)</td>
</tr>


<tr>
<td class="left">C-h v *var* RET</td>
<td class="left">Display the doc for the LISP variable var. (describe-variable).</td>
</tr>


<tr>
<td class="left">C-h w *command* RET</td>
<td class="left">Show which keys run the command named command. (where-is)</td>
</tr>


<tr>
<td class="left">C-h C *coding* RET</td>
<td class="left">Describe the coding system. (describe-coding-system)</td>
</tr>


<tr>
<td class="left">C-h C RET</td>
<td class="left">Describe the coding system current in use.</td>
</tr>


<tr>
<td class="left">C-h F *COMMAND* RET</td>
<td class="left">Enter Info and go to node that documents emacs command *command*. (info-goto-emacs-command-node)</td>
</tr>


<tr>
<td class="left">C-h I *method* RET</td>
<td class="left">Describe the input *method*. (describe-input-method)</td>
</tr>


<tr>
<td class="left">C-h K *key*</td>
<td class="left">go to the key-sequence document in Info. (Infp-goto-emacs-key-command-node)</td>
</tr>


<tr>
<td class="left">C-h L *Language-env* RET</td>
<td class="left">Display info on the character set, coding system and input methods. (describe-language-environment)</td>
</tr>


<tr>
<td class="left">C-h S *Symbol* RET</td>
<td class="left">Display the info on the symbol *symbol* based on the programming mode you are using (info-lookup-symbol)</td>
</tr>


<tr>
<td class="left">C-h .</td>
<td class="left">Display message for the special text area. (display-local-help)</td>
</tr>


<tr>
<td class="left">**Apropos**</td>
<td class="left">&#xa0;</td>
</tr>


<tr>
<td class="left">C-h a *pattern* RET</td>
<td class="left">Search for command whose names matches the pattern.</td>
</tr>


<tr>
<td class="left">M-x apropos RET *pattern* RET</td>
<td class="left">Search for functions(both interactive and non-interactive) and variables whose name matches the *pattern*</td>
</tr>


<tr>
<td class="left">M-x apropos-variable RET *pattern* RET</td>
<td class="left">Search for a user-option variables matching the *pattern*.</td>
</tr>


<tr>
<td class="left">M-x apropos-value RET *pattern* RET</td>
<td class="left">search for function whose definition match *pattern* and variable whose value matches *pattern*</td>
</tr>


<tr>
<td class="left">C-h d *pattern* RET</td>
<td class="left">search for function and variable whose documentation string matches *pattern*</td>
</tr>


<tr>
<td class="left">**Emacs help files**</td>
<td class="left">&#xa0;</td>
</tr>


<tr>
<td class="left">C-h C-c</td>
<td class="left">Describe the emacs copying condition. rules for copying and redistributing emacs. (describe-copying)</td>
</tr>


<tr>
<td class="left">C-h C-d</td>
<td class="left">Debugging in emacs. (view-emacs-debugging)</td>
</tr>


<tr>
<td class="left">C-h g</td>
<td class="left">Display general information about GNU Project. (describe-gnu-project)</td>
</tr>


<tr>
<td class="left">C-h C-m</td>
<td class="left">How to order printed copies. (view-order-manual)</td>
</tr>


<tr>
<td class="left">C-h C-n</td>
<td class="left">To see the emacs news and listing of new features. (view-emacs-news)</td>
</tr>


<tr>
<td class="left">C-h C-o</td>
<td class="left">How to get new version. (describe-distribution)</td>
</tr>


<tr>
<td class="left">C-h C-p</td>
<td class="left">Tells us about the known emacs problems. (view-emacs-problems)</td>
</tr>


<tr>
<td class="left">C-h C-t</td>
<td class="left">Display the emacs TODO list, or things that needs to be done. (view-emacs-todo)</td>
</tr>


<tr>
<td class="left">C-h C-w</td>
<td class="left">Describe warranty. (describe-no-warranty)</td>
</tr>


<tr>
<td class="left">**Commands work in Help mode**</td>
<td class="left">&#xa0;</td>
</tr>


<tr>
<td class="left">SPC</td>
<td class="left">Scroll forward</td>
</tr>


<tr>
<td class="left">DEL</td>
<td class="left">Scroll backard</td>
</tr>


<tr>
<td class="left">TAB</td>
<td class="left">Move point forward to next cross refrence</td>
</tr>


<tr>
<td class="left">S-TAB</td>
<td class="left">Move point backward to previous reference</td>
</tr>


<tr>
<td class="left">RET</td>
<td class="left">Follow a cross refrence point.</td>
</tr>


<tr>
<td class="left">C-c C-c</td>
<td class="left">Show all documents of symbol at the point.</td>
</tr>
</tbody>
</table>


<p>I just completed through the help documentation in emacs manual, and I am convinced the emacs has got the most extensive documentation an editor could ever have, the above table tries to cover as many things as possible but I am pretty sure, I would have definitely missed things, like this that once on IRC I had been suggested some lisp code to quickly take me to the help page and I missed it. Well, on many modern keyboards F1 as well works to call the help function.</p>

<p>While doing the typing I do make a lot of mistakes and undo is the most fundamental command for correcting the mistakes. C-/ does the same trick as C-x u and C-_ all meant to undo my work. If you see the buffers have been modified accidentaly, the easiest way is to press <strong>C-/</strong> repetadely unless the stars disappears from the mod line. Just press <strong>C-/</strong> to see the last change, so that we can understand if the change was intentional, if yes then we can leave it like this, if no then we can undo by pressing <strong>C-/</strong> repeatedly.</p>

<p>Its much easier to transpose characters in emacs using *C-t*(transpose-chars)  and transpose words using *M-t*(transpose-words) and moves the word containing or preceding point forward as tell, though it does not move any punctutation mark, for eg, FOO, BAR will become BAR, FOO. *C-M-t*(transpose-sexps) is similar to transposing two expressions and *C-x C-t*(transpose-lines) for transposing lines. The numeric command works here, it tell the transpose command to move forward the character before or containing point across several other characters.</p>

<p><strong>M&#x2013; M-l</strong> Convert last word to lower-case, it is Meta-Minus. <strong>M&#x2013; M-u</strong> Convert last word to uppercase. <strong>M&#x2013; M-c</strong> convert last word to lowercase with capital letters.</p>

<p>The spell checking ability of any editor should be good for the writer to help check spells on the fly, and emacs does have some nifty commands to do that as well. We need aspell, ispell, hunspell installed on the system for these commands to work. Once started the programs continue to run so that subsequent spell check commands complete more quickly and can be killed using <strong>M-x ispell-kill-ispell</strong> but is not required as it does not uses much memory and only active when spelling correcting is done, these programs using two dictionaries one is the standard dictionary and the other is our defined dictionary. The local dictionary can be defined by &ldquo;ispell-local-dictionary* or if nil by "ispell-dictionary&rdquo; or if both is nil then the default dictinary is selected. The variable &ldquo;ispell-complete-word-dict&rdquo; specifies the file name for its dictionary and is used for word completion. Flyspell mode is fully automatic mode of checking the words in the buffer as we insert them or edit them, when it finds the words it doesn&rsquo;t recognize it highlights that word. Right now I am seeing my buffer so colorful, thanks to flyspell mode, and my typing :). <strong>M-x flyspell-mode</strong> toggles the flyspell mode, to turn on flyspell mode for all text buffer <strong>turn-on-flyspell-mode</strong> to <strong>text-mode-hook</strong>.</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">Key binding</td>
<td class="left">command</td>
<td class="left">Description</td>
</tr>


<tr>
<td class="left">M-$</td>
<td class="left">ispell-word</td>
<td class="left">check and correct spelling of active region or word at point.</td>
</tr>


<tr>
<td class="left">M-x ipsell</td>
<td class="left">&#xa0;</td>
<td class="left">check or correct spelling in active region or entire buffer.</td>
</tr>


<tr>
<td class="left">M-x ispell-buffer</td>
<td class="left">&#xa0;</td>
<td class="left">check and correct spelling in the buffer.</td>
</tr>


<tr>
<td class="left">M-x ispell-region</td>
<td class="left">&#xa0;</td>
<td class="left">check and correct spelling in the region.</td>
</tr>


<tr>
<td class="left">M-x ispell-message</td>
<td class="left">&#xa0;</td>
<td class="left">check and correct spelling in the draft message, excluding citied content</td>
</tr>


<tr>
<td class="left">M-x ispell-change-dictionary RET *Dictionary* RET</td>
<td class="left">&#xa0;</td>
<td class="left">restart ispell/aspell/hunspell using dict as dictionary.</td>
</tr>


<tr>
<td class="left">M-x ispell-kill-ispell</td>
<td class="left">&#xa0;</td>
<td class="left">kill the dictionary process</td>
</tr>


<tr>
<td class="left">M-TAB / ESC-TAB</td>
<td class="left">ispell-complete-word</td>
<td class="left">complete the word based on the dictinary</td>
</tr>


<tr>
<td class="left">M-x flyspell-mode</td>
<td class="left">&#xa0;</td>
<td class="left">enable flyspell mode which highlights misspelled words</td>
</tr>


<tr>
<td class="left">M-x flyspell-prog-mode</td>
<td class="left">&#xa0;</td>
<td class="left">enable flyspell mode for comments and strings only</td>
</tr>
</tbody>
</table>


<p>When the commands encounter the errors in case of misspelled words, it usually display the numbered &ldquo;near-misses&rdquo; close to the incorrect word, then we have to choose the valid response from the below list.</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">digit</td>
<td class="left">replace the word, just this time, with one of the near misses, the near misses are displayed by no. and the no. can be used to select it.</td>
</tr>


<tr>
<td class="left">SPC</td>
<td class="left">skip this word, continue to consider incorrect and don't change.</td>
</tr>


<tr>
<td class="left">r *NEW* RET</td>
<td class="left">replace the word just this time, with the new word.</td>
</tr>


<tr>
<td class="left">R *NEW* RET</td>
<td class="left">replace the word and do query-replace so it can be replaced everywhere.</td>
</tr>


<tr>
<td class="left">a</td>
<td class="left">accept the incorrect word, treat it as correct one, but only in this editing session</td>
</tr>


<tr>
<td class="left">A</td>
<td class="left">same as above but include the buffer too.</td>
</tr>


<tr>
<td class="left">i</td>
<td class="left">insert this word in my private dictionary, so it can be treated as a correct word by my spell check applications</td>
</tr>


<tr>
<td class="left">m</td>
<td class="left">like i</td>
</tr>


<tr>
<td class="left">u</td>
<td class="left">save the lowercase version of this word to my private dictionary</td>
</tr>


<tr>
<td class="left">l *word* RET</td>
<td class="left">Look in the dictinary for the word that match *word*. these words become new list for near-misses.</td>
</tr>


<tr>
<td class="left">C-g X</td>
<td class="left">quit interactive spell checking</td>
</tr>


<tr>
<td class="left">C-g x</td>
<td class="left">quit interactive spell checking and move point back to where it was when you started spell checking.</td>
</tr>


<tr>
<td class="left">C-g q</td>
<td class="left">quit spell checking and kill the sub process as well.</td>
</tr>


<tr>
<td class="left">?</td>
<td class="left">show the list of options.</td>
</tr>
</tbody>
</table>


<p>Well. I am done for the Day 6, being emacs is such a vast entity as an editor, i spend most of my time going through the help document and manual pages only and enable myself to write quality content, which should help me or any one else who might want to use my content for his/her reference. I am still at a very primitive level of doing things with emacs, but I am aware I am still to young here. I will put these text on git hub as well, for anyone to help me correcting the content or if adding anything more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 5 - Minibuffer]]></title>
    <link href="http://www.omps.in/blog/2015/12/03/day-5-minibuffer/"/>
    <updated>2015-12-03T20:33:04+05:30</updated>
    <id>http://www.omps.in/blog/2015/12/03/day-5-minibuffer</id>
    <content type="html"><![CDATA[<p>Emacs have a minibuffer, and called the same because of its small screen space, the minibuffer resides in the same area as echo area so many time when any error or informative message appear in the echo area, it just hides the minibuffer for a few seconds or till the time any new keypress is made.</p>

<p>Minibuffer can be activated using typing text to it, and exited by typing <strong><RET></strong> (execute the command) or <strong>C-g</strong> (cancel the command). The minibuffer prompt shows the default arguments suppose the commands that read buffer names usually show buffer name as the default and can be activated using <strong><RET></strong></p>

<p>When finding a file in emacs, for opening or creating one, the minibuffer usually open the default dir, the default directory is stored in buffer-local variable as &lsquo;default-directory&rsquo;, now whenever emacs will read a filename using a minibuffer it will insert the directory name of the file being opened.</p>

<p>Emacs interpret &lsquo;~/&rsquo; as your home directory. you can specify something like this in case you do not want to type the complete path from where you want your files to be opened / created.</p>

<p>The minibuffer in emacs is also a buffer and the usual emacs commands are available for editing. <strong><RET></strong> in the minibuffer submits the argument and the same cannot be used to insert a new line and can be done with <strong>C-q C-j</strong> and <strong>C-o</strong>. The keys <TAB>, <SPC>, and ? are bound to completion of the commands.</p>

<p>When the minibuffer is active, the echo area is treated like an ordinary Emacs window.</p>

<p>Minibuffer uses a feature called as completion these(<TAB>, <RET> and <SPC>) commands attempt to complete the text in the minibuffer, &lsquo;?&rsquo; usually provide a list of possible completions. These commands work by narrowing down a large list of to a smaller subsets of matches. Emacs perform completion using one or more of the below <em>Completion Styles</em>.</p>

<p>The variable  <span class="underline">completion styles</span> specify the completion style to use.</p>

<p>From the Emacs Manual:</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">basic</td>
<td class="left">A matching completion alternative must have the same beginning as</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">the text in the minibuffer before point.  Furthermore, if there is</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">any text in the minibuffer after point, the rest of the completion</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">alternative must contain that text as a substring.</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>


<tr>
<td class="left">partial-completions</td>
<td class="left">This aggressive completion style divides the minibuffer text into</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">words separated by hyphens or spaces, and completes each word</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">separately. a \* in the minibuffer is treated as a wildcard and matches</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">any character at the corresponding position.</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>


<tr>
<td class="left">emacs22</td>
<td class="left">this is similar to basic, except it ignores the text in minibuffer after the</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">point.</td>
</tr>
</tbody>
</table>


<p>Below additional completions are also defined, and can be used in <strong>completion-styles</strong></p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">substring</td>
<td class="left">A completion alternative must contain the text in the minibuffer before point., and</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">text after point, as substrings.</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>


<tr>
<td class="left">initials</td>
<td class="left">the very agressive completions style attempts to complete acronyms and initalisms</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>


<tr>
<td class="left">emacs21</td>
<td class="left">a very simple completion style, if the text in minibuffer is foobar, only matches</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">starting with foobar is considered.</td>
</tr>
</tbody>
</table>


<p>M-x uses the minibuffer to read the name of a command, so completion works by matching the minibuffer text with available emacs commands.</p>

<p>THe commands for completion works as defined in the minibuffer when the completion is allowed.</p>

<p><strong><TAB></strong>     complete as much as possible; if unable to complete display a list of possible completions (minibuffer-complete)</p>

<p><strong><SPC></strong>     Completes up to one word. (minibuffer-complete-word)</p>

<p><strong><RET></strong>     Submit the minibuffer text as argument. (minibuffer-complete-and-exit)</p>

<p><strong>?</strong>         Display list of completions. (minibuffer-complete-help)</p>

<p><strong>Mouse-1</strong>   Clicking mouse button 1 or 2 on a completion alternative chooses it
<strong>Mouse-2</strong>   (mouse-choose-completion).</p>

<p><strong>M-v</strong>       Selects the window showing the completion list. (switch-to-completion)
<strong><PageUp></strong>  and then we can use the below pageup and prior commands.
<strong><prior></strong></p>

<p><strong><Right></strong>    (next-completion) this moves to point following alternatives.</p>

<p><strong><Left></strong>    (previous-completion) this moves to previous alternatives.</p>

<p>There are many modes in emacs which let you do so many things with the minibuffer, some noted ones are ido-mode and helm-mode.</p>

<p>Ido mode is part of the emacs from version 22.</p>

<p>I will cover these modes in my later learnings, and keep updating.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 4 - Editing]]></title>
    <link href="http://www.omps.in/blog/2015/11/28/day-4-editing/"/>
    <updated>2015-11-28T20:15:36+05:30</updated>
    <id>http://www.omps.in/blog/2015/11/28/day-4-editing</id>
    <content type="html"><![CDATA[<p>I am  becoming such an inconsistent learner and writer and have been not being able to post any new learnings a from last 4 days for emacs, but sometimes the work just take over us and do not allow any bandwidth, this really could be a lame excuse, but my sincerely I should be keeping my posts regular.</p>

<p>Again, it&rsquo;s more the like learning from your (in this case my) mistakes and going through your work again and again it&rsquo;s a way of reorganising your work and fixing it wherever necessary, I would also need help to understanding the mistakes we should avoid overlooking while technical writing or a posting on a blog.</p>

<h2>What new there could be there inserting text, believe me, emacs is pandora box for writers and enthusiasts.</h2>

<p>There is so much written in the #emacs manual <code>C-h r</code>, and this time it was the keys <code>C-q</code> or <code>C-x 8</code> this is used to print literals or Unicode characters by specifying their Hex or octal code. For eg, we have a key on keyboard as &lsquo;Del&rsquo; which is used to delete the character  on the point and move backward(from right to left, when the text displays from left to right or otherwise in case text being displayed the other way). The C-q combination when pressed will make the delete key type type the literal &lsquo;DEL&rsquo; instead of acting as text eraser, and the same goes for RET, when you press RET(RETURN or ENTER on some keyboard) we get RET as the literal. But really I want to insert a blank line could it be C-\n (new line character), well that is going to be a cryptic I am sure emacs doesn&rsquo;t treat it&rsquo;s commands this way and I can simply press <strong>C-o</strong> and similarly <strong>C-x C-o</strong> delete all but the last blank line, good gracious I was too fed up with doing C-k to delete my empty lines :) and similarly <strong>C-j</strong> is for entering a new line.</p>

<p>I want to count the no of words in my selected region or in the buffer, M-= and C-u M-= comes to the rescue. The latter would count the no. of words in the buffer. The command C-x = would do the display the information for my cursor position. Quoting from the emacs manual.</p>

<p>We can also move around the buffer with providing the numeric argument, the most simpler is to use the &lsquo;Meta&rsquo; command with the no. The keys M-1, M-2 as well as M&#x2013; are bound to commands (digit-argument and negative-argument) and set up argument for the next command.</p>

<p>For example I want to go down by 5 lines</p>

<p>M-5 C-n</p>

<p>I was just wondering now what if I want to write 5 o&rsquo;s in line, well thats another question to worry why I would like to do, but how to do in Emacs, and well M-5 0 C-n is not going to do this(i.e. insert 5 0 and go to next line). So, to achieve this  press <strong>M-5 C-u 0</strong> does the trick. We now know there is another way of inserting a <em>Numeric Argument</em> and that is using <strong>C-u</strong>, but when type alone it does have its own special meaning of 4 characters. &lsquo;C-u C-u C-f&rsquo; will move you 16 characters, &lsquo;C-u C-u C-o&rsquo; will make a lot of blank lines, and C-u C-k will kill 4 lines. :)</p>

<p>It would be good to know that emacs is powerful to repeat commands as well, the way it worked in Shell, but I think its pretty ahead of its time, and in one command itself you can ensure you can repeat the command as many times as you want. The trick is to use <strong>C-x z</strong>, if I have used a command &lsquo;C-u 2 0 C-d&rsquo; to delete 20 characters, we can repeat this same command using &lsquo;C-x z&rsquo; and insert &lsquo;z&rsquo; as many times you want to run the previous command. cool. For deleting 100 chars I may need to write like &lsquo;C-x z z z z z&rsquo; should remove 100 characters. <em>Note: this command will not change the arguments in the previous command</em></p>

<p>So we checked out the below in commands today.</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Commands</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">C-h r</td>
<td class="left">emacs manual</td>
</tr>


<tr>
<td class="left">C-q</td>
<td class="left">insert literals</td>
</tr>


<tr>
<td class="left">C-x 8</td>
<td class="left">same as above</td>
</tr>


<tr>
<td class="left">C-o</td>
<td class="left">insert blank line</td>
</tr>


<tr>
<td class="left">C-j</td>
<td class="left">insert new line</td>
</tr>


<tr>
<td class="left">C-x C-o</td>
<td class="left">Kill all but the last blank line</td>
</tr>


<tr>
<td class="left">M-=</td>
<td class="left">Count the no. of lines and characters and wordsin buffer</td>
</tr>


<tr>
<td class="left">C-u M-=</td>
<td class="left">same as above except no. of words</td>
</tr>


<tr>
<td class="left">C-x =</td>
<td class="left">cursor postion.</td>
</tr>


<tr>
<td class="left">M--</td>
<td class="left">Bound to digit argumenst such as M-1, M-2</td>
</tr>


<tr>
<td class="left">C-x z</td>
<td class="left">Repeat the previous command. no. of z will repeat the no. of times</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 3 - Understanding Files and Buffers]]></title>
    <link href="http://www.omps.in/blog/2015/11/23/day3-understanding-files-and-buffers/"/>
    <updated>2015-11-23T20:06:40+05:30</updated>
    <id>http://www.omps.in/blog/2015/11/23/day3-understanding-files-and-buffers</id>
    <content type="html"><![CDATA[<h1>The windows and the buffer.<a id="sec-1" name="sec-1"></a></h1>

<p>I will touch upon one new topic and what I learned today. While writing my <a href="http://www.omps.in/blog/2015/11/14/day-2-the-real-estate/">Day 2</a> article I learnt intersting usage of windows and frames (well, the one where we do our editing and writing stuff. It would be good to understand how opening emacs creates the frame and window within.)</p>

<p>We start emacs the same way we start our other application. (on Linux, by typing on the terminal window; on Windows and Mac, clicking on to the application icon.) When emacs starts up it usually display a special buffer name <strong>GNU Emacs</strong>. This contains information about emacs and links to common good stuff for begineers(in later days we will figure out how we can skip this)</p>

<p>It is good not to start multiple emacs session, instead just start once and do all the editing in the same sessions. In this way the emacs context accumlates valuable context, such as kill ring, registers, undo history, which helps a lot at advanced stages.</p>

<h2>Buffer<a id="sec-1-1" name="sec-1-1"></a></h2>

<p>The text we are going to edit in emacs is called as buffers and is used to hold the files text. So everytime we visit a file, run dired, send message with &lsquo;C-x m&rsquo; or ask for help, a buffer is used for holding the text of the message.</p>

<h3>Creating and selecting buffers<a id="sec-1-1-1" name="sec-1-1-1"></a></h3>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Command Keybinding</th>
<th scope="col" class="left">Command</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">C-x b BUFFER</td>
<td class="left">switch-to-buffer</td>
<td class="left">select of create a buffer</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">named BUFFER.</td>
</tr>
</tbody>

<tbody>
<tr>
<td class="left">C-x 4 b BUFFER</td>
<td class="left">switch-to-buffer-other-window</td>
<td class="left">slect BUFFER in other</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">window.</td>
</tr>
</tbody>

<tbody>
<tr>
<td class="left">C-x 5 b BUFFER</td>
<td class="left">switch-to-buffer-other-frame</td>
<td class="left">select BUFFER in other</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">frame.</td>
</tr>
</tbody>

<tbody>
<tr>
<td class="left">C-x <LEFT></td>
<td class="left">previous-buffer</td>
<td class="left">select the previous buffer</td>
</tr>


<tr>
<td class="left">C-x <RIGHT></td>
<td class="left">next-buffer</td>
<td class="left">select the next buffer</td>
</tr>
</tbody>

<tbody>
<tr>
<td class="left">C-u M-g M-g</td>
<td class="left">&#xa0;</td>
<td class="left">read num N and move to line N</td>
</tr>


<tr>
<td class="left">C-u M-g g</td>
<td class="left">&#xa0;</td>
<td class="left">in the most recent buffer</td>
</tr>


<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">other than current</td>
</tr>
</tbody>
</table>


<h3>Listing Buffers<a id="sec-1-1-2" name="sec-1-1-2"></a></h3>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Command Keybinding</th>
<th scope="col" class="left">Command</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">C-x C-b</td>
<td class="left">list-buffer</td>
<td class="left">List the exisitng buffers</td>
</tr>
</tbody>
</table>


<p>Here is an example of a buffer list:</p>

<p>CRM Buffer                Size  Mode              File
. * .emacs                3294  Emacs-Lisp        ~/.emacs
 %  <strong>Help</strong>                 101  Help
    search.c             86055  C                 ~/cvs/emacs/src/search.c
 %  src                  20959  Dired by name     ~/cvs/emacs/src/
-   <strong>mail</strong>                  42  Mail</p>

<p>%  HELLO                 1607  Fundamental       ~/cvs/emacs/etc/HELLO
%  NEWS                481184  Outline           ~/cvs/emacs/etc/NEWS
   <strong>scratch</strong>              191  Lisp Interaction
-   <strong>Messages</strong>            1554  Fundamental</p>

<p>`.&lsquo; in the first field indicates that this is the current buffer.<br/>
`%&rsquo; indicates a read-only buffer.<br/>
`*&lsquo; indicates that the buffer is &ldquo;modified&rdquo;.</p>

<p>The buffer `*Help*&lsquo; was made by a help request (*note Help::); it is not visiting any file.
The buffer `src&rsquo; was made by Dired on the directory `~/cvs/emacs/src/&lsquo;.</p>

<h3>Killing<a id="sec-1-1-3" name="sec-1-1-3"></a></h3>

<p>The buffers can simply be done by just pressing C-x k BUFFER or in the C-x C-b we can select the buffer by pressing k and then exectue it.</p>

<h2>Windows<a id="sec-1-2" name="sec-1-2"></a></h2>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Key Bindings</th>
<th scope="col" class="left">Description</th>
</tr>
</thead>

<tbody>
<tr>
<td class="left">'C-x 2'</td>
<td class="left">To split the windows into 2 one above the another.</td>
</tr>


<tr>
<td class="left">'C-x 3'</td>
<td class="left">Split the windows side by side.</td>
</tr>


<tr>
<td class="left">'C-x o'</td>
<td class="left">to move around windows, or click in the window with the mouse click to have the focus on that window.</td>
</tr>


<tr>
<td class="left">'C-M-v'</td>
<td class="left">Scroll the next window.</td>
</tr>


<tr>
<td class="left">'C-x 0'</td>
<td class="left">Delete the selected window</td>
</tr>


<tr>
<td class="left">'C-x 1'</td>
<td class="left">Delete all windows except the select one.</td>
</tr>


<tr>
<td class="left">'C-x 4 0'</td>
<td class="left">Delete the selected window and kill the buffer showing in that window.</td>
</tr>


<tr>
<td class="left">'C-x ^'</td>
<td class="left">Make selected window taller.</td>
</tr>


<tr>
<td class="left">'C-x }'</td>
<td class="left">Make selected window wider</td>
</tr>


<tr>
<td class="left">'C-x {'</td>
<td class="left">Make selected window narrower</td>
</tr>


<tr>
<td class="left">'C-x -'</td>
<td class="left">Shrink window if buffer dont need so many lines.</td>
</tr>


<tr>
<td class="left">'C-x +'</td>
<td class="left">Make all window same height.</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
</feed>
